[
{
        "date": "2021-10-06 07:26:15.005000",
        "language": "Kotlin",
        "compiler": "kotlinc",
        "version": "",
        "bugid": "KT-49101",
        "title": "IllegalArgumentException: ClassicTypeSystemContext couldn't handle: Captured(out Number)",
        "links": {
            "issuetracker": "https://youtrack.jetbrains.com/issue/KT-49101",
            "fix": ""
        },
        "oracle": "",
        "mutator": "generator",
        "severity": "",
        "reporter": "theosotr",
        "status": "Closed",
        "resolution": "Fixed",
        "resolutiondate": "2021-10-20 14:54:38.856000",
        "symptom": "crash",
        "bugtype": "",
        "resolvedin": "14 days, 7:28:23.851000",
        "test": [
            "class A<T: B<out Number>>(val x: T) {",
            "    fun test() {",
            "      val y: Int = x.m<C<out Number>>()",
            "    }",
            "}",
            "class B<T1> {",
            "    fun <X1: C<T1>> m(): Int = 1",
            "}",
            "class C<T>"
        ],
        "chars": {
            "characteristics": [
                "Parameterized class",
                "Bounded type parameters",
                "Use-site variance",
                "Parameterized type",
                "Parameterized function",
                "Type argument inference"
            ]
        },
        "errormsg": [
            "stacktrace",
            "ERROR: Exception while analyzing expression at (3,20) in test.kt",
            "org.jetbrains.kotlin.utils.KotlinExceptionWithAttachments: Exception while analyzing expression at (3,20) in test.kt",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.logOrThrowException(ExpressionTypingVisitorDispatcher.java:246)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:224)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:134)",
            "        at org.jetbrains.kotlin.resolve.LocalVariableResolver.process(LocalVariableResolver.kt:112)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitProperty(ExpressionTypingVisitorForStatements.java:116)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitProperty(ExpressionTypingVisitorForStatements.java:67)",
            "        at org.jetbrains.kotlin.psi.KtProperty.accept(KtProperty.java:58)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:147)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getTypeOfLastExpressionInBlock(ExpressionTypingServices.java:402)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedTypeWithWritableScope(ExpressionTypingServices.java:327)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:206)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:183)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:479)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:67)",
            "        at org.jetbrains.kotlin.psi.KtBlockExpression.accept(KtBlockExpression.java:79)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:147)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:178)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:165)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:1037)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:982)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBodies(BodyResolver.java:967)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveBehaviorDeclarationBodies(BodyResolver.java:127)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveBodies(BodyResolver.java:254)",
            "        at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations(LazyTopDownAnalyzer.kt:227)",
            "        at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations$default(LazyTopDownAnalyzer.kt:58)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:127)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:86)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:252)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:243)",
            "        at org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:113)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:243)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:90)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli$default(KotlinToJVMBytecodeCompiler.kt:56)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:169)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:52)",
            "        at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:92)",
            "        at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:44)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:98)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:76)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:45)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMainNoExit(CLITool.kt:227)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMainNoExit$default(CLITool.kt:222)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMain(CLITool.kt:214)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler$Companion.main(K2JVMCompiler.kt:271)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.main(K2JVMCompiler.kt)",
            "        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "        at java.base/java.lang.reflect.Method.invoke(Method.java:566)",
            "        at org.jetbrains.kotlin.preloading.Preloader.run(Preloader.java:87)",
            "        at org.jetbrains.kotlin.preloading.Preloader.main(Preloader.java:44)",
            "Caused by: java.lang.IllegalArgumentException: ClassicTypeSystemContext couldn't handle: Captured(out Number), class org.jetbrains.kotlin.resolve.calls.inference.CapturedType",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext$DefaultImpls.captureStatus(ClassicTypeSystemContext.kt:476)",
            "        at org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS.captureStatus(ClassicTypeSystemContextForCS.kt:25)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.captureStatus(NewConstraintSystemImpl.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.captureStatus(ConstraintInjector.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.isCapturedTypeFromSubtyping(ConstraintInjector.kt:312)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.access$isCapturedTypeFromSubtyping(ConstraintInjector.kt:220)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext$addNewIncorporatedConstraint$2.invoke(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext$addNewIncorporatedConstraint$2.invoke(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:451)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:482)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:428)",
            "        at org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt.contains(TypeUtils.kt:184)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt.containsInternal(ClassicTypeSystemContext.kt:821)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt.access$containsInternal(ClassicTypeSystemContext.kt:1)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext$DefaultImpls.contains(ClassicTypeSystemContext.kt:337)",
            "        at org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS.contains(ClassicTypeSystemContextForCS.kt:25)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.contains(NewConstraintSystemImpl.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.contains(ConstraintInjector.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addNewIncorporatedConstraint(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addConstraint(ConstraintInjector.kt:328)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addConstraint$default(ConstraintInjector.kt:319)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addUpperConstraint(ConstraintInjector.kt:300)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.simplifyUpperConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:276)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.internalAddSubtypeConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:121)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.addSubtypeConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:81)",
            "        at org.jetbrains.kotlin.types.AbstractTypeChecker.completeIsSubTypeOf(AbstractTypeChecker.kt:255)",
            "        at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf(AbstractTypeChecker.kt:217)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf$isSubtypeOf(ConstraintInjector.kt:269)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf(ConstraintInjector.kt:276)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf$default(ConstraintInjector.kt:262)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector.addSubTypeConstraintAndIncorporateIt(ConstraintInjector.kt:91)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector.addInitialSubtypeConstraint(ConstraintInjector.kt:51)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.addSubtypeConstraint(NewConstraintSystemImpl.kt:162)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.createToFreshVariableSubstitutorAndAddInitialConstraints$addSubtypeConstraint(ResolutionParts.kt:234)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.createToFreshVariableSubstitutorAndAddInitialConstraints(ResolutionParts.kt:243)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.process(ResolutionParts.kt:122)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processPart(ResolutionCandidate.kt:148)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processPart$default(ResolutionCandidate.kt:144)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processParts(ResolutionCandidate.kt:135)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.isSuccessful(ResolutionCandidate.kt:162)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$SuccessfulResultCollector.pushCandidates(TowerResolver.kt:363)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.processTowerData(TowerResolver.kt:293)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.access$processTowerData(TowerResolver.kt:80)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task.process(TowerResolver.kt:161)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task.run(TowerResolver.kt:180)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.run(TowerResolver.kt:99)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.runResolve(TowerResolver.kt:86)",
            "        at org.jetbrains.kotlin.resolve.calls.KotlinCallResolver.resolveCall(KotlinCallResolver.kt:75)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver.runResolutionAndInference(PSICallResolver.kt:101)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:601)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.lambda$computeTasksAndResolveCall$0(CallResolver.java:213)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:211)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:199)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.resolveFunctionCall(CallResolver.java:329)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getResolvedCallForFunction(CallExpressionResolver.kt:88)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getCallExpressionTypeInfoWithoutFinalTypeCheck(CallExpressionResolver.kt:210)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getUnsafeSelectorTypeInfo(CallExpressionResolver.kt:334)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getSafeOrUnsafeSelectorTypeInfo(CallExpressionResolver.kt:377)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getQualifiedExpressionTypeInfo(CallExpressionResolver.kt:474)",
            "        at org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor.visitQualifiedExpression(BasicExpressionTypingVisitor.java:702)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.visitQualifiedExpression(ExpressionTypingVisitorDispatcher.java:383)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher$ForBlock.visitQualifiedExpression(ExpressionTypingVisitorDispatcher.java:59)",
            "        at org.jetbrains.kotlin.psi.KtVisitor.visitDotQualifiedExpression(KtVisitor.java:302)",
            "        at org.jetbrains.kotlin.psi.KtDotQualifiedExpression.accept(KtDotQualifiedExpression.kt:32)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)",
            "        ... 57 more",
            "exception: org.jetbrains.kotlin.util.KotlinFrontEndException: Exception while analyzing expression at (3,20) in test.kt",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.logOrThrowException(ExpressionTypingVisitorDispatcher.java:253)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:224)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:134)",
            "        at org.jetbrains.kotlin.resolve.LocalVariableResolver.process(LocalVariableResolver.kt:112)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitProperty(ExpressionTypingVisitorForStatements.java:116)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitProperty(ExpressionTypingVisitorForStatements.java:67)",
            "        at org.jetbrains.kotlin.psi.KtProperty.accept(KtProperty.java:58)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:147)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getTypeOfLastExpressionInBlock(ExpressionTypingServices.java:402)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedTypeWithWritableScope(ExpressionTypingServices.java:327)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:206)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.getBlockReturnedType(ExpressionTypingServices.java:183)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:479)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorForStatements.visitBlockExpression(ExpressionTypingVisitorForStatements.java:67)",
            "        at org.jetbrains.kotlin.psi.KtBlockExpression.accept(KtBlockExpression.java:79)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:164)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.getTypeInfo(ExpressionTypingVisitorDispatcher.java:147)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:178)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingServices.checkFunctionReturnType(ExpressionTypingServices.java:165)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:1037)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBody(BodyResolver.java:982)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveFunctionBodies(BodyResolver.java:967)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveBehaviorDeclarationBodies(BodyResolver.java:127)",
            "        at org.jetbrains.kotlin.resolve.BodyResolver.resolveBodies(BodyResolver.java:254)",
            "        at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations(LazyTopDownAnalyzer.kt:227)",
            "        at org.jetbrains.kotlin.resolve.LazyTopDownAnalyzer.analyzeDeclarations$default(LazyTopDownAnalyzer.kt:58)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:127)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:86)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:252)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:243)",
            "        at org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:113)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:243)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:90)",
            "        at org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli$default(KotlinToJVMBytecodeCompiler.kt:56)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:169)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:52)",
            "        at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:92)",
            "        at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:44)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:98)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:76)",
            "        at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:45)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMainNoExit(CLITool.kt:227)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMainNoExit$default(CLITool.kt:222)",
            "        at org.jetbrains.kotlin.cli.common.CLITool$Companion.doMain(CLITool.kt:214)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler$Companion.main(K2JVMCompiler.kt:271)",
            "        at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.main(K2JVMCompiler.kt)",
            "        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
            "        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
            "        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
            "        at java.base/java.lang.reflect.Method.invoke(Method.java:566)",
            "        at org.jetbrains.kotlin.preloading.Preloader.run(Preloader.java:87)",
            "        at org.jetbrains.kotlin.preloading.Preloader.main(Preloader.java:44)",
            "Caused by: java.lang.IllegalArgumentException: ClassicTypeSystemContext couldn't handle: Captured(out Number), class org.jetbrains.kotlin.resolve.calls.inference.CapturedType",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext$DefaultImpls.captureStatus(ClassicTypeSystemContext.kt:476)",
            "        at org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS.captureStatus(ClassicTypeSystemContextForCS.kt:25)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.captureStatus(NewConstraintSystemImpl.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.captureStatus(ConstraintInjector.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.isCapturedTypeFromSubtyping(ConstraintInjector.kt:312)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.access$isCapturedTypeFromSubtyping(ConstraintInjector.kt:220)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext$addNewIncorporatedConstraint$2.invoke(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext$addNewIncorporatedConstraint$2.invoke(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:451)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:482)",
            "        at org.jetbrains.kotlin.types.TypeUtils.contains(TypeUtils.java:428)",
            "        at org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt.contains(TypeUtils.kt:184)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt.containsInternal(ClassicTypeSystemContext.kt:821)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContextKt.access$containsInternal(ClassicTypeSystemContext.kt:1)",
            "        at org.jetbrains.kotlin.types.checker.ClassicTypeSystemContext$DefaultImpls.contains(ClassicTypeSystemContext.kt:337)",
            "        at org.jetbrains.kotlin.resolve.calls.components.ClassicTypeSystemContextForCS.contains(ClassicTypeSystemContextForCS.kt:25)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.contains(NewConstraintSystemImpl.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.contains(ConstraintInjector.kt)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addNewIncorporatedConstraint(ConstraintInjector.kt:376)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addConstraint(ConstraintInjector.kt:328)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addConstraint$default(ConstraintInjector.kt:319)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.addUpperConstraint(ConstraintInjector.kt:300)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.simplifyUpperConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:276)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.internalAddSubtypeConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:121)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.AbstractTypeCheckerContextForConstraintSystem.addSubtypeConstraint(AbstractTypeCheckerContextForConstraintSystem.kt:81)",
            "        at org.jetbrains.kotlin.types.AbstractTypeChecker.completeIsSubTypeOf(AbstractTypeChecker.kt:255)",
            "        at org.jetbrains.kotlin.types.AbstractTypeChecker.isSubtypeOf(AbstractTypeChecker.kt:217)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf$isSubtypeOf(ConstraintInjector.kt:269)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf(ConstraintInjector.kt:276)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector$TypeCheckerContext.runIsSubtypeOf$default(ConstraintInjector.kt:262)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector.addSubTypeConstraintAndIncorporateIt(ConstraintInjector.kt:91)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.components.ConstraintInjector.addInitialSubtypeConstraint(ConstraintInjector.kt:51)",
            "        at org.jetbrains.kotlin.resolve.calls.inference.model.NewConstraintSystemImpl.addSubtypeConstraint(NewConstraintSystemImpl.kt:162)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.createToFreshVariableSubstitutorAndAddInitialConstraints$addSubtypeConstraint(ResolutionParts.kt:234)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.createToFreshVariableSubstitutorAndAddInitialConstraints(ResolutionParts.kt:243)",
            "        at org.jetbrains.kotlin.resolve.calls.components.CreateFreshVariablesSubstitutor.process(ResolutionParts.kt:122)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processPart(ResolutionCandidate.kt:148)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processPart$default(ResolutionCandidate.kt:144)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.processParts(ResolutionCandidate.kt:135)",
            "        at org.jetbrains.kotlin.resolve.calls.model.KotlinResolutionCandidate.isSuccessful(ResolutionCandidate.kt:162)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$SuccessfulResultCollector.pushCandidates(TowerResolver.kt:363)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.processTowerData(TowerResolver.kt:293)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.access$processTowerData(TowerResolver.kt:80)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task.process(TowerResolver.kt:161)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver$Task.run(TowerResolver.kt:180)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.run(TowerResolver.kt:99)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.TowerResolver.runResolve(TowerResolver.kt:86)",
            "        at org.jetbrains.kotlin.resolve.calls.KotlinCallResolver.resolveCall(KotlinCallResolver.kt:75)",
            "        at org.jetbrains.kotlin.resolve.calls.tower.PSICallResolver.runResolutionAndInference(PSICallResolver.kt:101)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.doResolveCallOrGetCachedResults(CallResolver.java:601)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.lambda$computeTasksAndResolveCall$0(CallResolver.java:213)",
            "        at org.jetbrains.kotlin.util.PerformanceCounter.time(PerformanceCounter.kt:101)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:211)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.computeTasksAndResolveCall(CallResolver.java:199)",
            "        at org.jetbrains.kotlin.resolve.calls.CallResolver.resolveFunctionCall(CallResolver.java:329)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getResolvedCallForFunction(CallExpressionResolver.kt:88)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getCallExpressionTypeInfoWithoutFinalTypeCheck(CallExpressionResolver.kt:210)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getUnsafeSelectorTypeInfo(CallExpressionResolver.kt:334)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getSafeOrUnsafeSelectorTypeInfo(CallExpressionResolver.kt:377)",
            "        at org.jetbrains.kotlin.resolve.calls.CallExpressionResolver.getQualifiedExpressionTypeInfo(CallExpressionResolver.kt:474)",
            "        at org.jetbrains.kotlin.types.expressions.BasicExpressionTypingVisitor.visitQualifiedExpression(BasicExpressionTypingVisitor.java:702)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.visitQualifiedExpression(ExpressionTypingVisitorDispatcher.java:383)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher$ForBlock.visitQualifiedExpression(ExpressionTypingVisitorDispatcher.java:59)",
            "        at org.jetbrains.kotlin.psi.KtVisitor.visitDotQualifiedExpression(KtVisitor.java:302)",
            "        at org.jetbrains.kotlin.psi.KtDotQualifiedExpression.accept(KtDotQualifiedExpression.kt:32)",
            "        at org.jetbrains.kotlin.types.expressions.ExpressionTypingVisitorDispatcher.lambda$getTypeInfo$0(ExpressionTypingVisitorDispatcher.java:175)"
        ],
        "comment": ""
    },
    {
        "date": "2021-01-25 15:14:31+00:00",
        "language": "Groovy",
        "compiler": "groovyc",
        "version": "",
        "bugid": "GROOVY-9907",
        "title": "Type tracked from instanceof condition is not captured in closure",
        "links": {
            "issuetracker": "https://issues.apache.org/jira/browse/GROOVY-9907",
            "fix": ""
        },
        "oracle": "error",
        "mutator": "generator",
        "severity": "",
        "reporter": "theosot",
        "status": "Closed",
        "resolution": "Fixed",
        "resolutiondate": "2021-03-02 15:12:58+00:00",
        "symptom": "Unexpected Compile-Time Error",
        "bugtype": "",
        "resolvedin": "35 days, 23:58:27",
        "test": [
            "@groovy.transform.TypeChecked",
            "class Test {",
            "  public static void main(String[] args) {",
            "    println(foo(10));",
            "  }",
            "  static Integer foo(Object x) {",
            "    if (x instanceof Integer) {",
            "      def bar = {x};",
            "      return bar();",
            "    }",
            "    return 100;",
            "  }",
            "}"
        ],
        "errormsg": [
            "org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:",
            "program.groovy: 10: [Static type checking] - Cannot return value of type java.lang.Object on method returning type java.lang.Integer",
            " @ line 10, column 14.",
            "         return bar();",
            "                ^1 error"
        ],
        "comment": "",
        "chars": {
            "characteristics": [
                "Lambda",
                "Flow typing",
                "Variable type inference"
            ]
        },
        "fix": {
            "commits": [
                "967c81c31e"
            ],
            "files": [
                "src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java"
            ],
            "lines": 14
        }
    },
    {
        "date": "2021-06-23 14:02:54+00:00",
        "language": "Java",
        "compiler": "javac",
        "version": "",
        "bugid": "JDK-8269348",
        "title": "Wrong type inference in presence of a generic with bound to Double",
        "links": {
            "issuetracker": "https://bugs.openjdk.java.net/browse/JDK-8269348",
            "fix": ""
        },
        "oracle": "error",
        "mutator": "inference",
        "severity": "",
        "reporter": "webbuggrp",
        "status": "Resolved",
        "resolution": "Not an Issue",
        "resolutiondate": "2021-06-30 15:12:56+00:00",
        "symptom": "Unexpected Compile-Time Error",
        "bugtype": "",
        "resolvedin": "7 days, 1:10:02",
        "test": [
            "class Test<T extends Double, K extends T> {",
            "  public T test() {",
            "    T foo = (T) null;",
            "    final var v = ((true) ?",
            "      foo :",
            "       (K) null);",
            "    return v;",
            "  }",
            "}"
        ],
        "errormsg": [
            "Test.java:7: error: incompatible types: double cannot be converted to T ",
            "    return v; ",
            "           ^ ",
            "  where T is a type-variable: ",
            "    T extends Double declared in class Test ",
            "1 error "
        ],
        "comment": "",
        "chars": {
            "characteristics": [
                "Parameterized class",
                "Bounded type parameters",
                "Cast",
                "Conditionals",
                "Variable type inference"
            ]
        }
    },
    {
        "date": "2021-10-01 15:27:16+00:00",
        "language": "Groovy",
        "compiler": "groovyc",
        "version": "",
        "bugid": "GROOVY-10277",
        "title": "STC fails to catch type error on the return type of lambdas",
        "links": {
            "issuetracker": "https://issues.apache.org/jira/browse/GROOVY-10277",
            "fix": ""
        },
        "oracle": "compiled",
        "mutator": "soundness",
        "severity": "",
        "reporter": "theosot",
        "status": "Open",
        "resolution": "",
        "resolutiondate": "None",
        "symptom": "Unexpected Runtime Behavior",
        "bugtype": "",
        "resolvedin": "None",
        "test": [
            "import java.util.function.Supplier;",
            "class Main {",
            "  static void main(String[] args) {",
            "    bar({ -> true}); // should not type-check",
            "    bar({ -> true} as Supplier<Long>); // should not type-check.",
            "  }",
            "  static Long bar(Supplier<Long> x) {",
            "    x.get()",
            "  }",
            "}"
        ],
        "errormsg": [],
        "comment": "",
        "chars": {
            "characteristics": [
                "Cast",
                "Lambda",
                "Function type"
            ]
        }
    }
]
